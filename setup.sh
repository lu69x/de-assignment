#!/usr/bin/env bash

set -euo pipefail

ENV_FILE=".env"
BACKUP_SUFFIX=".bak"

usage() {
    cat <<'USAGE'
Usage: ./setup.sh [-f|--force]

Generate or update the .env file with the required Airflow/MinIO parameters.

Options:
  -f, --force    Overwrite values without prompting (useful for CI).
USAGE
}

confirm_overwrite() {
    local prompt=$1
    local reply=""

    if [[ ! -t 0 ]]; then
        return 1
    fi

    if ! read -r -p "$prompt (y/N): " reply; then
        return 1
    fi

    [[ $reply =~ ^[Yy]$ ]]
}

maybe_backup_env() {
    if [[ -f $ENV_FILE ]]; then
        cp "$ENV_FILE" "${ENV_FILE}${BACKUP_SUFFIX}"
        echo "üì¶ Backed up existing $ENV_FILE to ${ENV_FILE}${BACKUP_SUFFIX}"
    fi
}

read_existing_values() {
    if [[ -f $ENV_FILE ]]; then
        while IFS='=' read -r key value; do
            [[ -z $key || $key == \#* ]] && continue
            key=$(echo "$key" | tr -d ' ')
            [[ -z $key ]] && continue
            printf -v "existing_${key}" '%s' "${value%$'\r'}"
        done < "$ENV_FILE"
    fi
}

final_value() {
    local key=$1
    local var="final_${key}"
    printf '%s' "${!var:-}"
}

update_env_file() {
    cat > "$ENV_FILE" <<EOF
# Generated by setup.sh on $(date -u +"%Y-%m-%dT%H:%M:%SZ")

# --- Airflow Configuration ---
AIRFLOW_UID=$(final_value AIRFLOW_UID)
AIRFLOW_GID=$(final_value AIRFLOW_GID)
AIRFLOW_PROJ_DIR=$(final_value AIRFLOW_PROJ_DIR)
# _PIP_ADDITIONAL_REQUIREMENTS="-r /opt/airflow/requirements.txt"

# --- Observability / Docs ---
DBT_DOCS_PORT=$(final_value DBT_DOCS_PORT)

# --- MinIO / S3 Configuration ---
S3_ENDPOINT_URL=$(final_value S3_ENDPOINT_URL)
S3_ACCESS_KEY_ID=$(final_value S3_ACCESS_KEY_ID)
S3_SECRET_ACCESS_KEY=$(final_value S3_SECRET_ACCESS_KEY)
S3_REGION=$(final_value S3_REGION)
S3_ADDRESSING_STYLE=$(final_value S3_ADDRESSING_STYLE)
S3_BUCKET=$(final_value S3_BUCKET)
S3_RAW_PREFIX=$(final_value S3_RAW_PREFIX)
S3_PARQUET_PREFIX=$(final_value S3_PARQUET_PREFIX)
S3_PREFIX=$(final_value S3_PREFIX)
S3_DOCS_PREFIX=$(final_value S3_DOCS_PREFIX)
EOF
}

declare force_overwrite=0

while [[ $# -gt 0 ]]; do
    case "$1" in
        -f|--force)
            force_overwrite=1
            shift
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        *)
            echo "Unknown option: $1" >&2
            usage >&2
            exit 1
            ;;
    esac
done

read_existing_values

if [[ -f $ENV_FILE && $force_overwrite -eq 0 ]]; then
    if ! confirm_overwrite "‚ö†Ô∏è  Found existing $ENV_FILE. Update managed values?"; then
        echo "‚ùå Cancelled."
        exit 1
    fi
fi

keys=(
    AIRFLOW_UID
    AIRFLOW_GID
    AIRFLOW_PROJ_DIR
    DBT_DOCS_PORT
    S3_ENDPOINT_URL
    S3_ACCESS_KEY_ID
    S3_SECRET_ACCESS_KEY
    S3_REGION
    S3_ADDRESSING_STYLE
    S3_BUCKET
    S3_RAW_PREFIX
    S3_PARQUET_PREFIX
    S3_PREFIX
    S3_DOCS_PREFIX
)

default_for() {
    case "$1" in
        AIRFLOW_UID) id -u ;;
        AIRFLOW_GID) id -g ;;
        AIRFLOW_PROJ_DIR) printf '.' ;;
        DBT_DOCS_PORT) printf '8082' ;;
        S3_ENDPOINT_URL) printf 'http://minio:9000' ;;
        S3_ACCESS_KEY_ID) printf 'admin' ;;
        S3_SECRET_ACCESS_KEY) printf 'admin123456' ;;
        S3_REGION) printf 'us-east-1' ;;
        S3_ADDRESSING_STYLE) printf 'path' ;;
        S3_BUCKET) printf 'warehouse' ;;
        S3_RAW_PREFIX) printf 'assignment/raw' ;;
        S3_PARQUET_PREFIX) printf 'assignment/parquet' ;;
        S3_PREFIX) printf 'assignment/parquet' ;;
        S3_DOCS_PREFIX) printf 'assignment/docs' ;;
        *) return 1 ;;
    esac
}

for key in "${keys[@]}"; do
    existing_var="existing_${key}"
    if [[ -n ${!existing_var:-} ]]; then
        printf -v "final_${key}" '%s' "${!existing_var}"
    elif [[ -n ${!key:-} ]]; then
        printf -v "final_${key}" '%s' "${!key}"
    else
        printf -v "final_${key}" '%s' "$(default_for "$key")"
    fi
done

maybe_backup_env
update_env_file

cat <<EOF
‚úÖ $ENV_FILE is ready!
   AIRFLOW_UID=$(final_value AIRFLOW_UID)
   AIRFLOW_GID=$(final_value AIRFLOW_GID)
   DBT_DOCS_PORT=$(final_value DBT_DOCS_PORT)
   S3_BUCKET=$(final_value S3_BUCKET)
   S3_PARQUET_PREFIX=$(final_value S3_PARQUET_PREFIX)
   S3_DOCS_PREFIX=$(final_value S3_DOCS_PREFIX)
EOF
