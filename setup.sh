#!/usr/bin/env bash

set -euo pipefail

ENV_FILE=".env"
BACKUP_SUFFIX=".bak"

usage() {
    cat <<'USAGE'
Usage: ./setup.sh [-f|--force]

Generate or update the .env file with the required Airflow/MinIO parameters.

Options:
  -f, --force    Overwrite values without prompting (useful for CI).
USAGE
}

confirm_overwrite() {
    local prompt=$1
    local reply=""

    if [[ ! -t 0 ]]; then
        return 1
    fi

    if ! read -r -p "$prompt (y/N): " reply; then
        return 1
    fi

    [[ $reply =~ ^[Yy]$ ]]
}

maybe_backup_env() {
    if [[ -f $ENV_FILE ]]; then
        cp "$ENV_FILE" "${ENV_FILE}${BACKUP_SUFFIX}"
        echo "üì¶ Backed up existing $ENV_FILE to ${ENV_FILE}${BACKUP_SUFFIX}"
    fi
}

read_existing_values() {
    declare -n _existing=$1
    if [[ -f $ENV_FILE ]]; then
        while IFS='=' read -r key value; do
            [[ -z $key || $key == \#* ]] && continue
            key=$(echo "$key" | tr -d ' ')
            [[ -z $key ]] && continue
            _existing[$key]="${value%$'\r'}"
        done < "$ENV_FILE"
    fi
}

update_env_file() {
    local -n _values=$1
    cat > "$ENV_FILE" <<EOF
# Generated by setup.sh on $(date -u +"%Y-%m-%dT%H:%M:%SZ")

# --- Airflow Configuration ---
AIRFLOW_UID=${_values[AIRFLOW_UID]}
AIRFLOW_GID=${_values[AIRFLOW_GID]}
AIRFLOW_PROJ_DIR=${_values[AIRFLOW_PROJ_DIR]}
# _PIP_ADDITIONAL_REQUIREMENTS="-r /opt/airflow/requirements.txt"

# --- Observability / Docs ---
DBT_DOCS_PORT=${_values[DBT_DOCS_PORT]}

# --- MinIO / S3 Configuration ---
S3_ENDPOINT_URL=${_values[S3_ENDPOINT_URL]}
S3_ACCESS_KEY_ID=${_values[S3_ACCESS_KEY_ID]}
S3_SECRET_ACCESS_KEY=${_values[S3_SECRET_ACCESS_KEY]}
S3_REGION=${_values[S3_REGION]}
S3_ADDRESSING_STYLE=${_values[S3_ADDRESSING_STYLE]}
S3_BUCKET=${_values[S3_BUCKET]}
S3_RAW_PREFIX=${_values[S3_RAW_PREFIX]}
S3_PARQUET_PREFIX=${_values[S3_PARQUET_PREFIX]}
S3_PREFIX=${_values[S3_PREFIX]}
S3_DOCS_PREFIX=${_values[S3_DOCS_PREFIX]}
EOF
}

declare force_overwrite=0

while [[ $# -gt 0 ]]; do
    case "$1" in
        -f|--force)
            force_overwrite=1
            shift
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        *)
            echo "Unknown option: $1" >&2
            usage >&2
            exit 1
            ;;
    esac
done

declare -A existing_values=()
read_existing_values existing_values

if [[ -f $ENV_FILE && $force_overwrite -eq 0 ]]; then
    if ! confirm_overwrite "‚ö†Ô∏è  Found existing $ENV_FILE. Update managed values?"; then
        echo "‚ùå Cancelled."
        exit 1
    fi
fi

declare -A defaults=(
    [AIRFLOW_UID]="$(id -u)"
    [AIRFLOW_GID]="$(id -g)"
    [AIRFLOW_PROJ_DIR]="."
    [DBT_DOCS_PORT]="8082"
    [S3_ENDPOINT_URL]="http://minio:9000"
    [S3_ACCESS_KEY_ID]="admin"
    [S3_SECRET_ACCESS_KEY]="admin123456"
    [S3_REGION]="us-east-1"
    [S3_ADDRESSING_STYLE]="path"
    [S3_BUCKET]="warehouse"
    [S3_RAW_PREFIX]="assignment/raw"
    [S3_PARQUET_PREFIX]="assignment/parquet"
    [S3_PREFIX]="assignment/parquet"
    [S3_DOCS_PREFIX]="assignment/docs"
)

declare -A final_values=()

for key in "${!defaults[@]}"; do
    if [[ -n ${existing_values[$key]:-} ]]; then
        final_values[$key]="${existing_values[$key]}"
    elif [[ -n ${!key:-} ]]; then
        final_values[$key]="${!key}"
    else
        final_values[$key]="${defaults[$key]}"
    fi
done

maybe_backup_env
update_env_file final_values

cat <<EOF
‚úÖ $ENV_FILE is ready!
   AIRFLOW_UID=${final_values[AIRFLOW_UID]}
   AIRFLOW_GID=${final_values[AIRFLOW_GID]}
   DBT_DOCS_PORT=${final_values[DBT_DOCS_PORT]}
   S3_BUCKET=${final_values[S3_BUCKET]}
   S3_PARQUET_PREFIX=${final_values[S3_PARQUET_PREFIX]}
   S3_DOCS_PREFIX=${final_values[S3_DOCS_PREFIX]}
EOF
